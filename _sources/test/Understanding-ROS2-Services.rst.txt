.. _ROS2Services:

Understanding ROS 2 services
============================

**Goal:** Learn about services in ROS 2 using command line tools.

**Tutorial level:** Beginner

**Time:** 10 minutes

.. contents:: Contents
   :depth: 2
   :local:

Background
----------

Services are another method of communication for nodes in the ROS graph.
Services are based on a call-and-response model, versus topics’ publisher-subscriber model.
While topics allow nodes to subscribe to data streams and get continual updates, services only provide data when they are specifically called by a client.

.. image:: src/Service-SingleServiceClient.gif

.. image:: src/Service-MultipleServiceClient.gif

Prerequisites
-------------

Some concepts mentioned in this tutorial, like :doc:`nodes <./Understanding-ROS2-Nodes>` and :doc:`topics <./Understanding-ROS2-Topics>`, were covered in previous tutorials in the series.

As always, don’t forget to source ROS 2 in `every new terminal you open <https://docs.ros.org/en/foxy/Tutorials/Configuring-ROS2-Environment.html>`_.

In addition, do not forget to run `bringup <https://emanual.robotis.com/docs/en/platform/turtlebot3/bringup>`_.

Tasks
-----

1 Setup
^^^^^^^
Start up the turtlebot3 node ``/teleop_keyboard``.

Open a new terminal and run:

.. code-block:: console

    ros2 run turtlebot3_teleop teleop_keyboard

2 ros2 service list
^^^^^^^^^^^^^^^^^^^

Running the ``ros2 service list`` command in a new terminal will return a list of all the services currently active in the system:

.. code-block:: console

  /diff_drive_controller/describe_parameters
  /diff_drive_controller/get_parameter_types
  /diff_drive_controller/get_parameters
  /diff_drive_controller/list_parameters
  /diff_drive_controller/set_parameters
  /diff_drive_controller/set_parameters_atomically
  /hlds_laser_publisher/describe_parameters
  /hlds_laser_publisher/get_parameter_types
  /hlds_laser_publisher/get_parameters
  /hlds_laser_publisher/list_parameters
  /hlds_laser_publisher/set_parameters
  /hlds_laser_publisher/set_parameters_atomically
  /motor_power
  /reset
  /robot_state_publisher/describe_parameters
  /robot_state_publisher/get_parameter_types
  /robot_state_publisher/get_parameters
  /robot_state_publisher/list_parameters
  /robot_state_publisher/set_parameters
  /robot_state_publisher/set_parameters_atomically
  /sound
  /teleop_keyboard/describe_parameters
  /teleop_keyboard/get_parameter_types
  /teleop_keyboard/get_parameters
  /teleop_keyboard/list_parameters
  /teleop_keyboard/set_parameters
  /teleop_keyboard/set_parameters_atomically
  /turtlebot3_node/describe_parameters
  /turtlebot3_node/get_parameter_types
  /turtlebot3_node/get_parameters
  /turtlebot3_node/list_parameters
  /turtlebot3_node/set_parameters
  /turtlebot3_node/set_parameters_atomically

You will see that nodes have the many services with ``parameters`` in their names.
Nearly every node in ROS 2 has these infrastructure services that parameters are built off of.
There will be more about parameters in the next tutorial.
In this tutorial, the parameter services will be omitted from discussion.

3 ros2 service type
^^^^^^^^^^^^^^^^^^^

Services have types that describe how the request and response data of a service is structured.
Service types are defined similarly to topic types, except service types have two parts: one message for the request and another for the response.

To find out the type of a service, use the command:

.. code-block:: console

  ros2 service type <service_name>

Let’s take a look at turtlebot3’s ``/sound`` service.
In a new terminal, enter the command:

.. code-block:: console

  ros2 service type /sound

Which should return:

.. code-block:: console

  turtlebot3_msgs/srv/Sound

3.1 ros2 service list -t
~~~~~~~~~~~~~~~~~~~~~~~~

To see the types of all the active services at the same time, you can append the ``--show-types`` option, abbreviated as ``-t``, to the ``list`` command:

.. code-block:: console

  ros2 service list -t

Which will return:

.. code-block:: console

  /diff_drive_controller/describe_parameters [rcl_interfaces/srv/DescribeParameters]
  /diff_drive_controller/get_parameter_types [rcl_interfaces/srv/GetParameterTypes]
  /diff_drive_controller/get_parameters [rcl_interfaces/srv/GetParameters]
  ...
  /sound [turtlebot3_msgs/srv/Sound]
  /teleop_keyboard/describe_parameters [rcl_interfaces/srv/DescribeParameters]
  ...

4 ros2 service find
^^^^^^^^^^^^^^^^^^^

If you want to find all the services of a specific type, you can use the command:

.. code-block:: console

  ros2 service find <type_name>

For example, you can find all the ``Sound`` typed services like this:

.. code-block:: console

  ros2 service find turtlebot3_msgs/srv/Sound

Which will return:

.. code-block:: console

  /sound

5 ros2 interface show
^^^^^^^^^^^^^^^^^^^^^

You can call services from the command line, but first you need to know the structure of the input arguments.

.. code-block:: console

  ros2 interface show <type_name>.srv

To run this command on the ``/sound`` service’s type, ``Sound``:

.. code-block:: console

  ros2 interface show turtlebot3_msgs/srv/Sound.srv

Which will return:

.. code-block:: console

  ########################################
  # CONSTANTS
  ########################################
  # uint8 OFF           = 0
  # uint8 ON            = 1
  # uint8 LOW_BATTERY   = 2
  # uint8 ERROR         = 3
  # uint8 BUTTON1       = 4
  # uint8 BUTTON2       = 5
 
  uint8 value
  ---
  bool success
  string message

The information above the ``---`` line tells us the arguments needed to call ``/sound``.

The information below the line isn’t something you need to know in this case, but it can help you understand the data type of the response you get from the call.

6 ros2 service call
^^^^^^^^^^^^^^^^^^^

Now that you know what a service type is, how to find a service’s type, and how to find the structure of that type’s arguments, you can call a service using:

.. code-block:: console

  ros2 service call <service_name> <service_type> <arguments>

The ``<arguments>`` part is optional.
For example, some services work without any arguments:

.. code-block:: console

  ros2 service call /sound turtlebot3_msgs/srv/Sound

This command causes turtlebot3 to play simple music.

The ``/sound`` service changes the music it plays depending on the arguments specified:

.. code-block:: console

  ros2 service call /sound turtlebot3_msgs/srv/Sound "value: 1"

Summary
-------

Nodes can communicate using services in ROS 2.
Unlike a topic - a one way communication pattern where a node publishes information that can be consumed by one or more subscribers - a service is a request/response pattern where a client makes a request to a node providing the service and the service processes the request and generates a response.

You generally don’t want to use a service for continuous calls; topics or even actions would be better suited.

In this tutorial you used command line tools to identify, elaborate on, and call services.

Next steps
----------

In the next tutorial, :doc:`./Understanding-ROS2-Parameters`, you will learn about configuring node settings.

Related content
---------------

Check out `this tutorial <https://discourse.ubuntu.com/t/call-services-in-ros-2/15261>`_; it's an excellent realistic application of "Understanding ROS 2 services" using a Robotis robot arm.