.. _ROS2Actions:

Understanding ROS 2 actions
===========================

**Goal:** Introspect actions in ROS 2.

**Tutorial level:** Beginner

**Time:** 15 minutes

.. contents:: Contents
   :depth: 2
   :local:

Background
----------

Actions are one of the communication types in ROS 2 and are intended for long running tasks.
They consist of three parts: a goal, feedback, and a result.

Actions are built on topics and services.
Their functionality is similar to services, except actions are preemptable (you can cancel them while executing).
They also provide steady feedback, as opposed to services which return a single response.

Actions use a client-server model, similar to the publisher-subscriber model (described in the :doc:`topics tutorial <./Understanding-ROS2-Topics>`).
An “action client” node sends a goal to an “action server” node that acknowledges the goal and returns a stream of feedback and a result.

.. image:: src/Action-SingleActionClient.gif

Prerequisites
-------------

This tutorial builds off concepts, like :doc:`nodes <./Understanding-ROS2-Nodes>` and :doc:`topics <./Understanding-ROS2-Topics>`, covered in previous tutorials.

This tutorial assumes that you have already completed the `navigation <https://emanual.robotis.com/docs/en/platform/turtlebot3/navigation/#run-navigation-nodes>`_ tutorial.

As always, don’t forget to source ROS 2 in `every new terminal you open <https://docs.ros.org/en/foxy/Tutorials/Configuring-ROS2-Environment.html>`_.

In addition, do not forget to run `bringup <https://emanual.robotis.com/docs/en/platform/turtlebot3/bringup>`_.

Tasks
-----

1 Setup
^^^^^^^

Start a navegation node by referring to the map created by turtlebot3.

Open a new terminal and run:

.. code-block:: console

    ros2 launch turtlebot3_navigation2 navigation2.launch.py map:=$HOME/map.yaml

Then, after manipulating the Rviz2 menu for the initial pose estimation, the turtlebot3 node ``/teleop_keyboard`` is start.

Open a new terminal and run:

.. code-block:: console

    ros2 run turtlebot3_teleop teleop_keyboard

Then, complete the steps up to section 5.2 of the navigation tutorial before proceeding to the following.

2 Use actions
^^^^^^^^^^^^^

Operate Rviz2 to set the goal, you will see the following message in your terminal:

.. code-block:: console

    [rviz2-10] Start navigation
    ...
    [controller_server-4] [INFO] [1649992440.333798538] [controller_server]: Received a goal, begin computing control effort.

When navigation is complete, You will see the following message in your terminal:

.. code-block:: console
    
    [controller_server-4] [INFO] [1650356892.407224026] [controller_server]: Passing new path to controller.
    [controller_server-4] [INFO] [1650356893.017389446] [controller_server]: Reached the goal!
    [bt_navigator-7] [INFO] [1650356893.056122337] [bt_navigator]: Navigation succeeded

If the Cancel button is pressed in Rviz2 while navigation is in progress, you will see the message:

.. code-block:: console

    [ActionServer] Client requested to cancel the goal. Cancelling.

If for some reason you are unable to complete navigation, you will see the message:

.. code-block:: console

    [bt_navigator-7] [ERROR] [1649992599.582101927] [bt_navigator]: Navigation failed

3 ros2 node info
^^^^^^^^^^^^^^^^

To see the ``/bt_navigator`` node’s actions, open a new terminal and run the command:

.. code-block:: console

    ros2 node info /bt_navigator

Which will return a list of ``/bt_navigator``’s subscribers, publishers, services, action servers and action clients:

.. code-block:: console

  /bt_navigator
  Subscribers:
    /clock: rosgraph_msgs/msg/Clock
    /goal_pose: geometry_msgs/msg/PoseStamped
    /parameter_events: rcl_interfaces/msg/ParameterEvent
    /tf: tf2_msgs/msg/TFMessage
    /tf_static: tf2_msgs/msg/TFMessage
  Publishers:
    /bt_navigator/transition_event: lifecycle_msgs/msg/TransitionEvent
    /parameter_events: rcl_interfaces/msg/ParameterEvent
    /rosout: rcl_interfaces/msg/Log
  Service Servers:
    /bt_navigator/change_state: lifecycle_msgs/srv/ChangeState
    /bt_navigator/describe_parameters: rcl_interfaces/srv/DescribeParameters
    /bt_navigator/get_available_states: lifecycle_msgs/srv/GetAvailableStates
    /bt_navigator/get_available_transitions: lifecycle_msgs/srv/GetAvailableTransitions
    /bt_navigator/get_parameter_types: rcl_interfaces/srv/GetParameterTypes
    /bt_navigator/get_parameters: rcl_interfaces/srv/GetParameters
    /bt_navigator/get_state: lifecycle_msgs/srv/GetState
    /bt_navigator/get_transition_graph: lifecycle_msgs/srv/GetAvailableTransitions
    /bt_navigator/list_parameters: rcl_interfaces/srv/ListParameters
    /bt_navigator/set_parameters: rcl_interfaces/srv/SetParameters
    /bt_navigator/set_parameters_atomically: rcl_interfaces/srv/SetParametersAtomically
  Service Clients:

  Action Servers:
    /navigate_to_pose: nav2_msgs/action/NavigateToPose
  Action Clients:

Notice that the ``/navigate_to_pose`` action for ``/bt_navigator`` is under ``Action Servers``.
This means ``/bt_navigator`` responds to and provides feedback for the ``/navigate_to_pose`` action.

The ``/rviz2`` node has the name ``/navigate_to_pose`` under ``Action Clients`` meaning that it sends goals for that action name.

.. code-block:: console

    ros2 node info /rviz2

Which will return:

.. code-block:: console

  There are 4 nodes in the graph with the exact name "/rviz2". You are seeing information about only one of them.
  /rviz2
  Subscribers:
    /clock: rosgraph_msgs/msg/Clock
    /downsampled_costmap: nav_msgs/msg/OccupancyGrid
    /downsampled_costmap_updates: map_msgs/msg/OccupancyGridUpdate
    /global_costmap/costmap: nav_msgs/msg/OccupancyGrid
    /global_costmap/costmap_updates: map_msgs/msg/OccupancyGridUpdate
    /global_costmap/voxel_marked_cloud: sensor_msgs/msg/PointCloud
    /local_costmap/costmap: nav_msgs/msg/OccupancyGrid
    /local_costmap/costmap_updates: map_msgs/msg/OccupancyGridUpdate
    /local_costmap/published_footprint: geometry_msgs/msg/PolygonStamped
    /local_costmap/voxel_marked_cloud: sensor_msgs/msg/PointCloud
    /local_plan: nav_msgs/msg/Path
    /map: nav_msgs/msg/OccupancyGrid
    /map_updates: map_msgs/msg/OccupancyGridUpdate
    /mobile_base/sensors/bumper_pointcloud: sensor_msgs/msg/PointCloud2
    /parameter_events: rcl_interfaces/msg/ParameterEvent
    /particlecloud: geometry_msgs/msg/PoseArray
    /plan: nav_msgs/msg/Path
    /scan: sensor_msgs/msg/LaserScan
    /waypoints: visualization_msgs/msg/MarkerArray
  Publishers:
    /clicked_point: geometry_msgs/msg/PointStamped
    /initialpose: geometry_msgs/msg/PoseWithCovarianceStamped
    /parameter_events: rcl_interfaces/msg/ParameterEvent
    /rosout: rcl_interfaces/msg/Log
    /waypoints: visualization_msgs/msg/MarkerArray
  Service Servers:
    /rviz2/describe_parameters: rcl_interfaces/srv/DescribeParameters
    /rviz2/get_parameter_types: rcl_interfaces/srv/GetParameterTypes
    /rviz2/get_parameters: rcl_interfaces/srv/GetParameters
    /rviz2/list_parameters: rcl_interfaces/srv/ListParameters
    /rviz2/set_parameters: rcl_interfaces/srv/SetParameters
    /rviz2/set_parameters_atomically: rcl_interfaces/srv/SetParametersAtomically
  Service Clients:
    /lifecycle_manager_localization/is_active: std_srvs/srv/Trigger
    /lifecycle_manager_localization/manage_nodes: nav2_msgs/srv/ManageLifecycleNodes
    /lifecycle_manager_navigation/is_active: std_srvs/srv/Trigger
    /lifecycle_manager_navigation/manage_nodes: nav2_msgs/srv/ManageLifecycleNodes
  Action Servers:

  Action Clients:
    /FollowWaypoints: nav2_msgs/action/FollowWaypoints
    /navigate_to_pose: nav2_msgs/action/NavigateToPose

4 ros2 action list
^^^^^^^^^^^^^^^^^^

To identify all the actions in the ROS graph, run the command:

.. code-block:: console

    ros2 action list

Which will return:

.. code-block:: console

    /FollowWaypoints
    /backup
    /compute_path_to_pose
    /follow_path
    /navigate_to_pose
    /spin
    /wait

4.1 ros2 action list -t
~~~~~~~~~~~~~~~~~~~~~~~

Actions have types, similar to topics and services.
To find ``/navigate_to_pose``'s type, run the command:

.. code-block:: console

    ros2 action list -t

Which will return:

.. code-block:: console

    /FollowWaypoints [nav2_msgs/action/FollowWaypoints]
    /backup [nav2_msgs/action/BackUp]
    /compute_path_to_pose [nav2_msgs/action/ComputePathToPose]
    /follow_path [nav2_msgs/action/FollowPath]
    /navigate_to_pose [nav2_msgs/action/NavigateToPose]
    /spin [nav2_msgs/action/Spin]
    /wait [nav2_msgs/action/Wait]

In brackets to the right of each action name is the action type. For example ``nav2_msgs/action/NavigateToPose``.
You will need this when you want to execute an action from the command line or from code.

5 ros2 action info
^^^^^^^^^^^^^^^^^^

You can further introspect the ``/navigate_to_pose`` action with the command:

.. code-block:: console

    ros2 action info /navigate_to_pose

Which will return

.. code-block:: console

  Action: /navigate_to_pose
  Action clients: 6
      /rviz2
      /rviz2
      /rviz2
      /rviz2
      /bt_navigator_rclcpp_node
      /waypoint_follower_rclcpp_node
  Action servers: 1
      /bt_navigator

This tells us what we learned earlier from running ``ros2 node info`` on each node:
The ``/rviz2`` node has an action client and the ``/bt_navigator`` node has an action server for the ``/navigate_to_pose`` action.


6 ros2 interface show
^^^^^^^^^^^^^^^^^^^^^

One more piece of information you will need before sending or executing an action goal yourself is the structure of the action type.

Recall that you identified ``/navigate_to_pose``’s type when running the command ``ros2 action list -t``.
Enter the following command with the action type in your terminal:


.. code-block:: console

  ros2 interface show nav2_msgs/action/NavigateToPose


Which will return:

.. code-block:: console

  #goal definition
  geometry_msgs/PoseStamped pose
  string behavior_tree
  ---
  #result definition
  std_msgs/Empty result
  ---
  geometry_msgs/PoseStamped current_pose
  builtin_interfaces/Duration navigation_time
  int16 number_of_recoveries
  float32 distance_remaining

The first section of this message, above the ``---``, is the structure (data type and name) of the goal request.
The next section is the structure of the result.
The last section is the structure of the feedback.

7 ros2 action send_goal
^^^^^^^^^^^^^^^^^^^^^^^

Now let’s send an action goal from the command line with the following syntax:

.. code-block:: console

    ros2 action send_goal <action_name> <action_type> <values>

``<values>`` need to be in YAML format.

Keep an eye on the turtlebot3, and enter the following command into your terminal:

.. code-block:: console

    ros2 action send_goal /navigate_to_pose nav2_msgs/action/NavigateToPose "pose: {pose: {position: {x: 2, y: 0, z: 0}, orientation: {x: 0, y: 0, w: 1, z: 0}}}"

The following message will appear in the terminal and turtlebot3 will start running. (If turtlebot3 does not work, change the values of position and orientation and try again.)

.. code-block:: console

  Waiting for an action server to become available...
  Sending goal:
       pose:
    header:
      stamp:
        sec: 0
        nanosec: 0
      frame_id: ''
    pose:
      position:
        x: 2.0
        y: 0.0
        z: 0.0
      orientation:
        x: 0.0
        y: 0.0
        z: 0.0
        w: 1.0
  behavior_tree: ''
  Goal accepted with ID: 7395d59ee4e24460a9dac979c1cf7c93
  Result:
      result: {}
  Goal finished with status: SUCCEEDED

All goals have a unique ID, shown in the return message.

To see the feedback of this goal, add ``--feedback`` to the last command you ran.
First, make sure you change the value of ``theta``.
After running the previous command, the turtle will already be at the orientation of ``1.57`` radians, so it won’t move unless you pass a new ``theta``.

.. code-block:: console

  ros2 action send_goal /navigate_to_pose nav2_msgs/action/NavigateToPose "pose: {pose: {position: {x: 2, y: 0, z: 0}, orientation: {x: 0, y: 0, w: 1, z: 0}}}"
 --feedback

Your terminal will return the message:

.. code-block:: console

    Feedback:
      current_pose:
    header:
      stamp:
        sec: 3593
        nanosec: 392000000
      frame_id: map
    pose:
      position:
        x: 0.9404635318738738
        y: -0.11579111067382131
        z: 0.011377294247744273
      orientation:
        x: 0.00019422627776279693
        y: 1.0885388347429731e-05
        z: -0.09437272167311778
        w: 0.9955369162224321
    navigation_time:
      sec: 9
      nanosec: 224000000
    number_of_recoveries: 0
    distance_remaining: 1.0659054517745972

It continues to receive the remaining distance until the goal is completed.

Summary
-------

Actions are like services that allow you to execute long running tasks, provide regular feedback, and are cancelable.

A robot system would likely use actions for navigation.
An action goal could tell a robot to travel to a position.
While the robot navigates to the position, it can send updates along the way (i.e. feedback), and then a final result message once it's reached its destination.

Next steps
----------

Now you've covered all of the core ROS 2 concepts.

Related content
---------------

You can read more about the design decisions behind actions in ROS 2 `here <https://design.ros2.org/articles/actions.html>`__.