.. _ROS2Params:

Understanding ROS 2 parameters
==============================

**Goal:** Learn how to get, set, save and reload parameters in ROS 2.

**Tutorial level:** Beginner

**Time:** 5 minutes

.. contents:: Contents
   :depth: 2
   :local:

Background
----------

A parameter is a configuration value of a node.
You can think of parameters as node settings.
A node can store parameters as integers, floats, booleans, strings, and lists.
In ROS 2, each node maintains its own parameters.
For more background on parameters, please see `the concept document <https://docs.ros.org/en/foxy/Concepts/About-ROS-2-Parameters.html>`_ .

Prerequisites
-------------

Some concepts mentioned in this tutorial, like :doc:`nodes <./Understanding-ROS2-Nodes>` and :doc:`topics <./Understanding-ROS2-Topics>`, were covered in previous tutorials in the series.

This tutorial assumes that you have already completed the `navigation <https://emanual.robotis.com/docs/en/platform/turtlebot3/navigation/#run-navigation-nodes>`_ tutorial and have created maps in SLAM.

As always, don’t forget to source ROS 2 in `every new terminal you open <https://docs.ros.org/en/foxy/Tutorials/Configuring-ROS2-Environment.html>`_.

In addition, do not forget to run `bringup <https://emanual.robotis.com/docs/en/platform/turtlebot3/bringup>`_ on Raspberry Pi (Commands other than bringup should be running on the remotePC).

Tasks
-----

1 Setup
^^^^^^^

Start a navegation node by referring to the map created by turtlebot3.

Open a new terminal and run:

.. code-block:: console

    ros2 launch turtlebot3_navigation2 navigation2.launch.py map:=$HOME/map.yaml

Then, after manipulating the Rviz2 menu for the initial pose estimation, the turtlebot3 node ``/teleop_keyboard`` is start.

Open a new terminal and run:

.. code-block:: console

    ros2 run turtlebot3_teleop teleop_keyboard


2 ros2 param list
^^^^^^^^^^^^^^^^^

To see the parameters belonging to your nodes, open a new terminal and enter the command:

.. code-block:: console

    ros2 param list

You will see the node namespaces, ``/teleop_keyboard`` and ``/turtlebot3_node``, followed by each node’s parameters:

.. code-block:: console

  /amcl
    alpha1
    alpha2
    ...
    use_sim_time
    ...

Every node has the parameter ``use_sim_time``; it’s not unique to turtlebot3.

The ``/controller_server`` parameter ``FollowPath`` contains information about the wheels on the turtlebot3.

Some nodes are throwing exceptions, which are caused by not setting parameters in the source.

To determine a parameter's type, you can use ``ros2 param get``.


3 ros2 param get
^^^^^^^^^^^^^^^^

To display the type and current value of a parameter, use the command:

.. code-block:: console

    ros2 param get <node_name> <parameter_name>

Let’s find out the current value of ``/controller_server``’s parameter ``FollowPath.max_speed_xy``:

.. code-block:: console

    ros2 param get /controller_server FollowPath.max_speed_xy

Which will return the value:

.. code-block:: console

    Double value is: 0.22

Now you know ``FollowPath.max_speed_xy`` holds an double value.

4 ros2 param set
^^^^^^^^^^^^^^^^

To change a parameter's value at runtime, use the command:

.. code-block:: console

    ros2 param set <node_name> <parameter_name> <value>

Let’s change ``/controller_server``’s Max speed:

.. code-block:: console

    ros2 param set /controller_server FollowPath.max_speed_xy 0.05

Your terminal should return the message:

.. code-block:: console

  Set parameter successful

Follow the navigation tutorial to set the navigation goal.

Then, turtlebot3 should move much slower than when you first ran turtlebot3 through the navigation tutorial.

Setting parameters with the ``set`` command will only change them in your current session, not permanently.
However, you can save your settings and reload them the next time you start a node.

5 ros2 param dump
^^^^^^^^^^^^^^^^^

You can “dump” all of a node’s current parameter values into a file to save them for later by using the command:

.. code-block:: console

  ros2 param dump <node_name>

To save your current configuration of ``/controller_server``’s parameters, enter the command:

.. code-block:: console

  ros2 param dump /controller_server

Your terminal will return the message:

.. code-block:: console

  Saving to:  ./controller_server.yaml

You will find a new file in the directory your workspace is running in.
If you open this file, you’ll see the following contents:

.. code-block:: YAML

  /controller_server:
    ros__parameters:
      FollowPath:
        ...
        max_speed_xy: 0.05
        ...
        use_sim_time: true

Dumping parameters comes in handy if you want to reload the node with the same parameters in the future.

6 ros2 param load
^^^^^^^^^^^^^^^^^

You can load parameters from a file to a currently running node using the command:

.. code-block:: console

  ros2 param load <node_name> <parameter_file>

To load the ./turtlesim.yaml file generated with ``ros2 param dump`` into ``/controller_server`` node’s parameters, enter the command:

.. code-block:: console

  ros2 param load /controller_server ./controller_server.yaml

Your terminal will return the message:

.. code-block:: console

  ...
  Set parameter FollowPath.max_speed_xy successful
  ...
  Set parameter use_sim_time successful

Summary
-------

Nodes have parameters to define their default configuration values.
You can ``get`` and ``set`` parameter values from the command line.
You can also save the parameter settings to a file to reload them in a future session.

Next steps
----------

Jumping back to ROS 2 communication methods, in the next tutorial you'll learn about :doc:`actions <./Understanding-ROS2-Actions>`.